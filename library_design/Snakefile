"""``snakemake`` file that does library design."""


configfile: "config.yaml"


rule all:
    input:
        "results/numbering/sequential_to_reference.csv",
        "results/numbering/mutations_from_reference.csv",
        "results/pango_lineages/mutations_all.csv",
        "results/usher/clade_counts.tsv",
#        "results/alignment_counts.csv",
#        config["mutation_stats"],
#        config["mutations_to_make_chart"],
#        config["targeted_mutations"],
#        config["saturated_sites"],
#        config["mutation_design_classification"],


rule get_ref_spike:
    """Get the reference spike."""
    params:
        accession=config["ref_spike_accession"],
    output:
        fasta="results/numbering/ref_spike.fa",
    conda:
        "environment.yml"
    shell:
        "efetch -db protein -format fasta -id {params.accession} > {output.fasta}"


rule sequential_to_reference:
    """Convert sequential to reference numbering."""
    input:
        ref=rules.get_ref_spike.output.fasta,
        variant=config["variant_spike"],
    params:
        ref_cterm_truncation_start=config["ref_cterm_truncation_start"],
    output:
        numbering="results/numbering/sequential_to_reference.csv",
        mutations="results/numbering/mutations_from_reference.csv",
    conda:
        "environment.yml"
    log:
        notebook="results/numbering/sequential_to_reference.ipynb",
    notebook:
        "notebooks/sequential_to_reference.py.ipynb"


rule pango_lineages:
    """Get all mutations in all designated Pango lineages, and check variant correct."""
    input:
        variant_mutations=rules.sequential_to_reference.output.mutations,
    params:
        pango_lineages_json=config["pango_lineages_json"],
        variant_lineage=config["variant_lineage"],
    output:
        mutations_by_lineage="results/pango_lineages/mutations_by_lineage.csv",
        mutations_all="results/pango_lineages/mutations_all.csv",
    conda:
        "environment.yml"
    log:
        notebook="results/pango_lineages/pango_lineages.ipynb",
    notebook:
        "notebooks/pango_lineages.py.ipynb"


rule alignment_counts:
    """Get counts of mutations in GISAID table."""
    params:
        table_url=config["gisaid_alignment_count_url"],
    output:
        alignment_counts="results/alignment_counts.csv",
    conda:
        "environment.yml"
    script:
        "scripts/alignment_counts.py"


rule usher_counts:
    """Get counts of mutations in UShER tree."""
    params:
        mat=config["usher_mat"],
        fasta=config["usher_fasta"],
        gtf=config["usher_gtf"],
        recent_clades=",".join(config["usher_recent_clades"]),
    output:
        mat="results/usher/mat.pb.gz",
        fasta="results/usher/ref.fa",
        gtf="results/usher/ref.gtf",
        clade_counts="results/usher/clade_counts.tsv",
        translated_muts="results/usher/translated_muts.tsv",
        recent_mat="results/usher/recent_mat.pb.gz",
        translated_recent_muts="results/usher/translated_recent_muts.tsv",
    conda:
        "envs/usher.yml",
    shell:
        """
        wget -O - {params.fasta} | gunzip -c > {output.fasta}
        wget -O - {params.gtf} | gunzip -c > {output.gtf}
        wget -O {output.mat} {params.mat}
        matUtils summary \
            -i {output.mat} \
            -g {output.gtf} \
            -f {output.fasta} \
            -c {output.clade_counts} \
            -t {output.translated_muts}
        matUtils extract -i {output.mat} -o {output.recent_mat} -c "{params.recent_clades}"
        matUtils summary \
            -i {output.recent_mat} \
            -g {output.gtf} \
            -f {output.fasta} \
            -t {output.translated_recent_muts}
        """


rule usher_mutcounts:
    input:
        translated_muts_tsv="results/usher/translated_{mutset}s.tsv",
    output:
        mut_counts_csv="results/usher/{mutset}_counts.csv",
    script:
        "scripts/usher_mutcounts.py"


rule aggregate_mut_stats:
    input:
       config["sequential_to_reference"],
       rules.alignment_counts.output.alignment_counts,
       config["usher_mut_counts"],
       config["usher_recent_mut_counts"],
    output:
        config["mutation_stats"],
    log:
        "results/notebooks/aggregate_mut_stats.ipynb",
    notebook:
        "notebooks/aggregate_mut_stats.py.ipynb"


rule mutations_to_make:
    input:
        config["mutation_stats"],
    output:
        config["mutations_to_make_chart"],
        config["targeted_mutations"],
        config["saturated_sites"],
        config["mutation_design_classification"],
    params:
        config["mutation_retain_thresholds"],
        config["site_saturation_threshold"],
        config["sites_to_allow_deletions"],
        config["mutations_to_include"],
        config["sites_to_saturate"],
        config['insertion_sites'],
        config["saturate_diffs_from_reference"],
    log:
        notebook="results/notebooks/mutations_to_make.ipynb",
    notebook:
        "notebooks/mutations_to_make.py.ipynb"
